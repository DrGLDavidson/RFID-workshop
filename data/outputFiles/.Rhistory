library(tidyverse)
library(rmarkdown)
library(dplyr)
library(tidyr)
library(lubridate)
library(ggplot2)
library(stringi) #may not need this
library(magrittr)
setwd("F:/RWorkspace/GitHub/RFID-workshop/data/feederData/outputFiles")
setwd("F:/RWorkspace/GitHub/RFID-workshop/data/outputFiles")
df2<-read.delim("Masterdf_noRepeats.txt", header=TRUE)
names(df2)[names(df) == "Date"] <- "dateTime"
head(df2)
head(df2)
names(df2)[names(df) == "date"] <- "dateRinged"
names(df2)[names(df) == "time"] <- "timeRinged"
View(df2)
View(df2)
names(df2)[names(df2) == "date"] <- "dateRinged"
names(df2)[names(df2) == "time"] <- "timeRinged"
names(df2)[names(df2) == "Date"] <- "dateTime"
names(df2)
df3<-df2
df3$date<-date(df3$dateTime)
View(df3)
View(df2)
df2$date<-date(df2$dateTime)
rm(df3)
df3<-df2%>%
select(date, dateTime, Hmsec, ID, Event, Channel, Dur, Clks, Freq, Edges, Reps, Type, TagID_hex, feeder, dateRinged, timeRinged, btoRingType, btoID, species, pitType, age, sex, wing, weight, timeSincePreviousVisit)
df3<-df2%>%
select(date, dateTime, Hmsec, ID, Event, Channel, Dur, Clks, Freq, Edges, Reps, Type, TagID_hex, feeder, dateRinged, timeRinged, btoRingType, btoID, species, pitTYPE, age, sex, wing, weight, timeSincePreviousVisit)
names(df3)
df3<-df3%>%
mutate(Date=ymd_hms(dateTime))
class(df3$Date)
df3<-df3%>%
mutate(date=ymd(date))
class(df3$dateTime)
df3<-df3%>%
mutate(Date=ymd_hms(dateTime))
class(df3$dateTime)
df3<-df3%>%
mutate(dateTime=ymd_hms(dateTime))
class(df3$dateTime)
df3<-df3%>%
mutate(date=ymd(date))
class(df3$date)
View(df3)
df4<-df3
df4<-df4%>%
mutate(date=ymd_hms(date))
rm(df4)
df3$dateOnly <- format(as.POSIXct(df3$dateTime),
format = "%Y:%M:%D")
class(dateOnly)
class(df3$dateOnly)
df3<-df3%>%
select(date, dateTime, Hmsec, ID, Event, Channel, Dur, Clks, Freq, Edges, Reps, Type, TagID_hex, feeder, dateRinged, timeRinged, btoRingType, btoID, species, pitTYPE, age, sex, wing, weight, timeSincePreviousVisit)
names(df3)
df4<-df3 %>%
arrange(dateTime)%>%
group_by(date, feeder, TagID_hex) %>%
mutate(timeSincePreviousVisit = dateTime - lag(dateTime))%>%
arrange(TagID_hex, feeder, dateTime)%>%
ungroup()%>%
select(feeder, TagID_hex,dateTime, timeSincePreviousVisit)
View(df4)
df4<-df3 %>%
arrange(dateTime)%>%
group_by(date, feeder, TagID_hex) %>%
mutate(timeSincePreviousVisit = dateTime - lag(dateTime))%>%
arrange(TagID_hex, feeder, dateTime)%>%
ungroup()%>%
select(feeder, TagID_hex,date, dateTime, timeSincePreviousVisit)
View(df4)
df4<-df3 %>%
arrange(dateTime)%>%
group_by(date, feeder, TagID_hex) %>%
mutate(timeSincePreviousVisit = dateTime - lag(dateTime))%>%
arrange(TagID_hex, feeder, dateTime)%>%
ungroup()%>%
df4<-df3 %>%
arrange(dateTime)%>%
group_by(date, feeder, TagID_hex) %>%
mutate(timeSincePreviousVisit = dateTime - lag(dateTime))%>%
arrange(TagID_hex, feeder, dateTime)%>%
ungroup()
df4$timeSincePreviousVisit <- gsub(' secs', '', df4$timeSincePreviousVisit)
df4$timeSincePreviousVisit <- as.numeric(as.character(df4$timeSincePreviousVisit))
class(df4$timeSincePreviousVisit)
df5<-df4%>%
filter(timeSincePreviousVisit <=20)%>%
select(timeSincePreviousVisit)
class(df5$timeSincePreviousVisit)
ggplot(df5, aes(timeSincePreviousVisit, y= 1-..y..))+
stat_ecdf(geom = "step", color="purple")
#histogram
ggplot(df5, aes(x=timeSincePreviousVisit)) +geom_histogram(binwidth = 1)
df5$timeSincePreviousVisit[is.na(df5$timeSincePreviousVisit)] <- 'firstVisit'
View(df5)
df4$timeSincePreviousVisit[is.na(df4$timeSincePreviousVisit)] <- 'firstVisit'
df6<-df4%>%
filter(timeSincePreviousVisit=='firstVisit')
df7<-df4%>%
filter(timeSincePreviousVisit>2)
df7$timeSincePreviousVisit <- as.character(df7$timeSincePreviousVisit)
df8<-bind_rows(df6,df7)%>%
arrange(dateTime, TagID_hex,feeder)
view(df8)
rm(list = ls(all.names = TRUE))
#load the following packages
library(tidyverse)
library(rmarkdown)
library(dplyr)
library(tidyr)
library(lubridate)
library(ggplot2)
library(stringi) #may not need this
library(magrittr) #may not need this
#clear the global environment so we don't have any conflicts with the next steps
rm(list = ls(all.names = TRUE))
#choose the appropriate working directory
setwd("F:/RWorkspace/GitHub/RFID-workshop/data/feederData")
#call your most recent dataset of merged feeder data.
df<-read.delim("Masterdf_220209.txt", header=TRUE)
df2<-read.delim("Masterdf_noMisreads.txt", header=TRUE)
head(df2)
names(df2)[names(df2) == "date"] <- "dateRinged"
names(df2)[names(df2) == "time"] <- "timeRinged"
names(df2)[names(df2) == "Date"] <- "dateTime"
names(df2)
df2$date<-date(df2$dateTime)
df3<-df3%>%
select(date, dateTime, Hmsec, ID, Event, Channel, Dur, Clks, Freq, Edges, Reps, Type, TagID_hex, feeder, dateRinged, timeRinged, btoRingType, btoID, species, pitTYPE, age, sex, wing, weight, timeSincePreviousVisit)
df2<-df2%>%
select(date, dateTime, Hmsec, ID, Event, Channel, Dur, Clks, Freq, Edges, Reps, Type, TagID_hex, feeder, dateRinged, timeRinged, btoRingType, btoID, species, pitTYPE, age, sex, wing, weight, timeSincePreviousVisit)
df2<-df2%>%
select(date, dateTime, Hmsec, ID, Event, Channel, Dur, Clks, Freq, Edges, Reps, Type, TagID_hex, feeder, dateRinged, timeRinged, btoRingType, btoID, species, pitTYPE, age, sex, wing, weight)
names(df2)
df3<-df3%>%
mutate(dateTime=ymd_hms(dateTime))
df3<-df2%>%
mutate(dateTime=ymd_hms(dateTime))
class(df3$dateTime)
df4<-df3 %>%
arrange(dateTime)%>%
group_by(date, feeder, TagID_hex) %>%
mutate(timeSincePreviousVisit = dateTime - lag(dateTime))%>%
arrange(TagID_hex, feeder, dateTime)%>%
ungroup()%>%
select(feeder, TagID_hex,date, dateTime, timeSincePreviousVisit)
View(df4)
df4<-df3 %>%
arrange(dateTime)%>%
group_by(date, feeder, TagID_hex) %>%
mutate(timeSincePreviousVisit = dateTime - lag(dateTime))%>%
arrange(TagID_hex, feeder, dateTime)%>%
ungroup()
df4$timeSincePreviousVisit <- gsub(' secs', '', df4$timeSincePreviousVisit)
df4$timeSincePreviousVisit <- as.numeric(as.character(df4$timeSincePreviousVisit))
class(df4$timeSincePreviousVisit)
df5<-df4%>%
filter(timeSincePreviousVisit <=20)%>%
select(timeSincePreviousVisit)
class(df5$timeSincePreviousVisit)
ggplot(df5, aes(timeSincePreviousVisit, y= 1-..y..))+
stat_ecdf(geom = "step", color="purple")
#histogram
ggplot(df5, aes(x=timeSincePreviousVisit)) +geom_histogram(binwidth = 1)
df5<-df5%>%
arrange(dateTime, feeder,  timeSincePreviousVisit)
df4<-df4%>%
arrange(dateTime, feeder,  timeSincePreviousVisit)
View(df4)
dfx<-df4%>%
arrange(dateTime, feeder,  timeSincePreviousVisit)%>%
select(TagID_hex,dateTime, feeder, timeSincePreviousVisit)
View(dfx)
dfx<-df4%>%
arrange(dateTime, feeder,  timeSincePreviousVisit)%>%
select(timeSincePreviousVisit, TagID_hex,dateTime, feeder)
View(dfx)
dfx<-df4%>%
arrange(dateTime, feeder,  timeSincePreviousVisit)%>%
select(dateTime, timeSincePreviousVisit, TagID_hex, feeder)
View(dfx)
View(df2)
path2<-"F:/RWorkspace/GitHub/RFID-workshop/data/feederData/F01_220206"
setwd(path2)
df1<-read.delim("C1935RT.txt", header=TRUE)
View(df1)
View(df4)
df4$timeSincePreviousVisit[is.na(df4$timeSincePreviousVisit)] <- 'firstVisit'
df6<-df4%>%
filter(timeSincePreviousVisit=='firstVisit')
df7<-df4%>%
filter(timeSincePreviousVisit>2)
df7$timeSincePreviousVisit <- as.character(df7$timeSincePreviousVisit)
df8<-bind_rows(df6,df7)%>%
arrange(dateTime, TagID_hex,feeder)
view(df8)
write.table(df8, file = "Masterdf_noRepeats.txt",sep="\t",row.names=FALSE)
rm(dfx)
rm(df1, df2, df3, df4, df5, df6, df7)
rm(path2)
df1<-df8
rm(df8)
#Check for periods of missing data
#we have a dataframe with time since previous visit grouped by individual and by date. We would expect big time gaps across all individuals if a feeder was down.
df1$timeSincePreviousVisit <- as.numeric(as.character(df7$timeSincePreviousVisit))
df1$timeSincePreviousVisit <- as.numeric(as.character(df1$timeSincePreviousVisit))
hist(df1$timeSincePreviousVisit)
min(df1$timeSincePreviousVisit)
hist(df1$dateTime)
View(df1)
setwd("F:/RWorkspace/GitHub/RFID-workshop/data/outputFiles")
#As we will be working with time, we need to check how our dataframe is named and organised
df2<-read.delim("Masterdf_noMisreads.txt", header=TRUE)
df2<-read.delim("Masterdf_noMisreads.txt", header=TRUE)
head(df2)
#there are two separate date columns and a time column. This is because we merged the feeder data with ringing data.
#rename ringing columns
names(df2)[names(df2) == "date"] <- "dateRinged"
names(df2)[names(df2) == "time"] <- "timeRinged"
#rename feeder date column to indicate it also includes hours, minutes and seconds
names(df2)[names(df2) == "Date"] <- "dateTime"
names(df2)
#create a new column with the date only
df2$date<-date(df2$dateTime)
#cleanup the dataframe by selected the columns and order we want them to appear
df2<-df2%>%
select(date, dateTime, Hmsec, ID, Event, Channel, Dur, Clks, Freq, Edges, Reps, Type, TagID_hex, feeder, dateRinged, timeRinged, btoRingType, btoID, species, pitTYPE, age, sex, wing, weight)
names(df2)
#we need to change the class of the timeDate column as a POSIX class.
df3<-df2%>%
mutate(dateTime=ymd_hms(dateTime))
class(df3$dateTime)
df4<-df3 %>%
arrange(dateTime)%>%
group_by(date, feeder, TagID_hex) %>%
mutate(timeSincePreviousVisit = dateTime - lag(dateTime))%>%
arrange(TagID_hex, feeder, dateTime)%>%
ungroup()%>%
select(feeder, TagID_hex,date, dateTime, timeSincePreviousVisit)
#look at the output of just those selected columns to see we have produced what we think we want
View(df4)
#0 sec was calculated if the bird was on the feeder within the same seconds
#NA is given if it is the birds' first visit to feeder X for that date
#rerun the above code without the select() argument so we have the full dataframe of variables
df4<-df3 %>%
arrange(dateTime)%>%
group_by(date, feeder, TagID_hex) %>%
mutate(timeSincePreviousVisit = dateTime - lag(dateTime))%>%
arrange(TagID_hex, feeder, dateTime)%>%
ungroup()
#the new column timeSincePreviousVisit has "secs" and we don't want that, so lets remove it
df4$timeSincePreviousVisit <- gsub(' secs', '', df4$timeSincePreviousVisit)
#the column timeSincePreviousVisit needs to be numeric for graphical purposes and for filtering based on greater than/less than values
df4$timeSincePreviousVisit <- as.numeric(as.character(df4$timeSincePreviousVisit))
class(df4$timeSincePreviousVisit)
#create a dataframe of successive visits that are less than 20 seconds so we can graph how frequently birds are read at the feeder
#use the "select" argument to extract only the column named timesSincePreviousVisit
df5<-df4%>%
filter(timeSincePreviousVisit <=20)%>%
select(timeSincePreviousVisit)
class(df5$timeSincePreviousVisit)
#cumulative frequency graph
ggplot(df5, aes(timeSincePreviousVisit, y= 1-..y..))+
stat_ecdf(geom = "step", color="purple")
#histogram
ggplot(df5, aes(x=timeSincePreviousVisit)) +geom_histogram(binwidth = 1)
#it appears that visit frequency drops after 2 seconds, but it is not a clear drop.
#Most of the literature does a cut off at 2 or 3 seconds.
#Filter dataset to remove visits that were within 2 seconds of eachother
#note that there are NAs because it was the first visit of the dataframe so we can replace that with 'firstVisit'
df4$timeSincePreviousVisit[is.na(df4$timeSincePreviousVisit)] <- 'firstVisit'
#to ensure we do not loose these visits - i think???? NO THIS JUST DUPLICATES DATA
#df6<-df4%>%
filter(timeSincePreviousVisit=='firstVisit')
df6<-df4%>%
filter(timeSincePreviousVisit>2)
#we need to make the column timeSincePreviousVisit a character back from numerical in order to bind with df5, which is a character string
df6$timeSincePreviousVisit <- as.character(df6$timeSincePreviousVisit)
df7<-bind_rows(df6)%>%
arrange(dateTime, TagID_hex,feeder)
view(df7)
write.table(df7, file = "Masterdf_noRepeats.txt",sep="\t",row.names=FALSE)
rm(list = ls(all.names = TRUE))
df1<-read.delim("Masterdf_noRepeats.txt", header=TRUE)
df1<-read.delim("Masterdf_noRepeats.txt", header=TRUE)
hist(df1$dateTime)
df1$timeSincePreviousVisitnumeric <- as.numeric(as.character(df1$timeSincePreviousVisit))
View(df1)
hist(df1$dateTime, na.rm = TRUE)
df1<-read.delim("Masterdf_noRepeats.txt", header=TRUE)
across all individuals if a feeder was down.
hist(df1$dateTime, na.rm = TRUE)
class(df1$dateTime)
df1$dateTime <- as.numeric(as.character(df1$dateTime))
View(df1)
df1<-read.delim("Masterdf_noRepeats.txt", header=TRUE)
df1<-read.delim("Masterdf_noRepeats.txt", header=TRUE)
View(df1)
class(df1$dateTime)
View(df1)
df1<-df1%>%
mutate(dateTime=ymd_hms(dateTime))
class(df1$dateTime)
hist(df1$dateTime, breaks = "hours", plot = TRUE, freq = FALSE, format)
hist(df1$dateTime, breaks = "hours", plot = TRUE, freq = TRUE, format)
F01<-df1%>%
filter(feeder=='F01')
F02<-df1%>%
filter(feeder=='F02')
F03<-df1%>%
filter(feeder=='F03')
class(F01$dateTime)
#plot a histogram of visit frequency over hours for feeder F01
hist(F01$dateTime, breaks = "hours", plot = TRUE, freq = TRUE, format)
hist(F02$dateTime, breaks = "hours", plot = TRUE, freq = TRUE, format)
#plot a histogram of visit frequency over hours for feeder F03
hist(F03$dateTime, breaks = "hours", plot = TRUE, freq = TRUE, format)
hist(F01$dateTime, breaks = "hours", plot = TRUE, freq = TRUE, format, ylim=c(1, 40) )
hist(F02$dateTime, breaks = "hours", plot = TRUE, freq = TRUE, format, ylim=c(1, 40))
hist(F03$dateTime, breaks = "hours", plot = TRUE, freq = TRUE, format, ylim=c(1, 40))
unique(df1$date)
df2<-df1[!(df7$date=="2020-01-20") ,]
df2<-df1[!(df1$date=="2020-01-20") ,]
unique(df2$date)
df2<-df1[!(df1$date=="2022-02-04") ,]
unique(df2$date)
df3<-df1[!(df1$date=="2022-02-04" |df1$date=="2022-02-05" |df1$date=="2022-02-06" ),]
unique(df3$date)
df4<-df1%>%
mutate(feeder03Malf = case_when(date =='2022-02-04' ~'Y',
date =='2022-02-05'~'Y' ,
date =='2022-02-06'~'Y'))
View(df4)
