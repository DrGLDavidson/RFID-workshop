panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", size=.8)) +
labs(x = "songs") +
labs(y = "rank")  +
guides(colour = guide_legend(override.aes = list(size= 12))) +
theme(legend.title = element_blank()) +
ggtitle("")+
#theme(plot.title = element_text(hjust = 0.5))+
geom_point() +
ylim(1, 10)
theme(axis.text.x = element_text(angle=90, hjust=0.95, vjust= 0.3)) +
scale_color_manual(values = c("#7C7771", "#00ABE6","#00ABE6", "#E69762",
"#BE9948","#ACA16E", "#EFDD9F","#EFDD9F",
"#ED1B33","#4E5065", "#577E43", "#B66950",
"#BDBDB9","#BDBDB9" ))
ggplot(df4Top, aes(x = songTitle, y = rank, color=album)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.7, size = 1) +
geom_pointrange(data = topMeans,
aes(y = rank,
ymin = rank - se,
ymax = rank + se),
colour = "black",
alpha = 1,
size = .6) +
theme_bw() +   theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", size=.8)) +
labs(x = "songs") +
labs(y = "rank")  +
guides(colour = guide_legend(override.aes = list(size= 12))) +
theme(legend.title = element_blank()) +
ggtitle("")+
#theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle=90, hjust=0.95, vjust= 0.3)) +
scale_color_manual(values = c("#7C7771", "#00ABE6","#00ABE6", "#E69762",
"#BE9948","#ACA16E", "#EFDD9F","#EFDD9F",
"#ED1B33","#4E5065", "#577E43", "#B66950",
"#BDBDB9","#BDBDB9" ))
ggplot(df4Top, aes(x = songTitle, y = rank, color=album)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.7, size = 1) +
geom_pointrange(data = topMeans,
aes(y = rank,
ymin = rank - se,
ymax = rank + se),
colour = "black",
alpha = 1,
size = .6) +
geom_point() +
scale_x_continuous(breaks=seq(0,1,2,3,4,5,6,7,8,9,10))
ggplot(df4Top, aes(x = songTitle, y = rank, color=album)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.7, size = 1) +
geom_pointrange(data = topMeans,
aes(y = rank,
ymin = rank - se,
ymax = rank + se),
colour = "black",
alpha = 1,
size = .6) +
geom_point() +
scale_y_continuous(breaks=seq(0,1,2,3,4,5,6,7,8,9,10))
ggplot(df4Top, aes(x = songTitle, y = rank, color=album)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.7, size = 1) +
geom_pointrange(data = topMeans,
aes(y = rank,
ymin = rank - se,
ymax = rank + se),
colour = "black",
alpha = 1,
size = .6) +
scale_y_continuous(breaks=seq(0,1,2,3,4,5,6,7,8,9,10))
ggplot(df4Top, aes(x = songTitle, y = rank, color=album)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.7, size = 1) +
geom_pointrange(data = topMeans,
aes(y = rank,
ymin = rank - se,
ymax = rank + se),
colour = "black",
alpha = 1,
size = .6) +
scale_y_continuous(breaks=seq(0,1,2,3,4,5,6,7,8,9,10))
ggplot(df4Top, aes(x = songTitle, y = rank, color=album)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.7, size = 1) +
geom_pointrange(data = topMeans,
aes(y = rank,
ymin = rank - se,
ymax = rank + se),
colour = "black",
alpha = 1,
size = .6) +
geom_point +
scale_y_continuous(breaks=seq(0,1,2,3,4,5,6,7,8,9,10))
ggplot(df4Top, aes(x = songTitle, y = rank, color=album)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.7, size = 1) +
geom_pointrange(data = topMeans,
aes(y = rank,
ymin = rank - se,
ymax = rank + se),
colour = "black",
alpha = 1,
size = .6) +
geom_point() +
scale_y_continuous(breaks=seq(0,1,2,3,4,5,6,7,8,9,10))
ggplot(df4Top, aes(x = songTitle, y = rank, color=album)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.7, size = 1) +
scale_y_continuous(breaks=seq(0,1,2,3,4,5,6,7,8,9,10))
ggplot(df4Top, aes(x = songTitle, y = rank, color=album)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.7, size = 1) +
scale_y_continuous(breaks=seq( 0,10,1))
geom_pointrange(data = topMeans,
aes(y = rank,
ymin = rank - se,
ymax = rank + se),
colour = "black",
alpha = 1,
size = .6) +
theme_bw() +   theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", size=.8)) +
labs(x = "songs") +
labs(y = "rank")  +
guides(colour = guide_legend(override.aes = list(size= 12))) +
theme(legend.title = element_blank()) +
ggtitle("")+
#theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle=90, hjust=0.95, vjust= 0.3)) +
scale_color_manual(values = c("#7C7771", "#00ABE6","#00ABE6", "#E69762",
"#BE9948","#ACA16E", "#EFDD9F","#EFDD9F",
"#ED1B33","#4E5065", "#577E43", "#B66950",
"#BDBDB9","#BDBDB9" ))
ggplot(df4Top, aes(x = songTitle, y = rank, color=album)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.7, size = 1) +
geom_point()+
scale_y_continuous(breaks=seq( 0,10,1))
geom_pointrange(data = topMeans,
aes(y = rank,
ymin = rank - se,
ymax = rank + se),
colour = "black",
alpha = 1,
size = .6) +
theme_bw() +   theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", size=.8)) +
labs(x = "songs") +
labs(y = "rank")  +
guides(colour = guide_legend(override.aes = list(size= 12))) +
theme(legend.title = element_blank()) +
ggtitle("")+
#theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle=90, hjust=0.95, vjust= 0.3)) +
scale_color_manual(values = c("#7C7771", "#00ABE6","#00ABE6", "#E69762",
"#BE9948","#ACA16E", "#EFDD9F","#EFDD9F",
"#ED1B33","#4E5065", "#577E43", "#B66950",
"#BDBDB9","#BDBDB9" ))
ggplot(df4Top, aes(x = songTitle, y = rank, color=album)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.7, size = 1) +
geom_pointrange(data = topMeans,
aes(y = rank,
ymin = rank - se,
ymax = rank + se),
colour = "black",
alpha = 1,
size = .6) +
theme_bw() +   theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", size=.8)) +
labs(x = "songs") +
labs(y = "rank")  +
guides(colour = guide_legend(override.aes = list(size= 12))) +
theme(legend.title = element_blank()) +
ggtitle("")+
#theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle=90, hjust=0.95, vjust= 0.3)) +
scale_color_manual(values = c("#7C7771", "#00ABE6","#00ABE6", "#E69762",
"#BE9948","#ACA16E", "#EFDD9F","#EFDD9F",
"#ED1B33","#4E5065", "#577E43", "#B66950",
"#BDBDB9","#BDBDB9" )) + geom_point()+
scale_y_continuous(breaks=seq( 0,10,1))
tiff(file="top30ranks.tiff", width = 8, height = 9, units = 'in', res = 300)
ggplot(df4Top, aes(x = songTitle, y = rank, color=album)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.7, size = 1) +
geom_pointrange(data = topMeans,
aes(y = rank,
ymin = rank - se,
ymax = rank + se),
colour = "black",
alpha = 1,
size = .6) +
theme_bw() +   theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", size=.8)) +
labs(x = "songs") +
labs(y = "rank")  +
guides(colour = guide_legend(override.aes = list(size= 12))) +
theme(legend.title = element_blank()) +
ggtitle("")+
#theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle=90, hjust=0.95, vjust= 0.3)) +
scale_color_manual(values = c("#7C7771", "#00ABE6","#00ABE6", "#E69762",
"#BE9948","#ACA16E", "#EFDD9F","#EFDD9F",
"#ED1B33","#4E5065", "#577E43", "#B66950",
"#BDBDB9","#BDBDB9" )) + geom_point()+
scale_y_continuous(breaks=seq( 0,10,1))
dev.off()
tiff(file="top30ranks.tiff", width = 8, height = 9, units = 'in', res = 300)
ggplot(df4Top, aes(x = songTitle, y = rank, color=album)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.7, size = 1) +
geom_pointrange(data = topMeans,
aes(y = rank,
ymin = rank - se,
ymax = rank + se),
colour = "black",
alpha = 1,
size = .6) +
theme_bw() +   theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", size=.8)) +
labs(x = "songs") +
labs(y = "rank")  +
guides(colour = guide_legend(override.aes = list(size= 12))) +
theme(legend.title = element_blank()) +
ggtitle("Top 30 ranked setlist songs Jan2023")+
#theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle=90, hjust=0.95, vjust= 0.3)) +
scale_color_manual(values = c("#7C7771", "#00ABE6","#00ABE6", "#E69762",
"#BE9948","#ACA16E", "#EFDD9F","#EFDD9F",
"#ED1B33","#4E5065", "#577E43", "#B66950",
"#BDBDB9","#BDBDB9" )) + geom_point()+
scale_y_continuous(breaks=seq( 0,10,1))
dev.off()
ggplot(polarisingTop30, aes(x = songTitle, y = rank, color=album)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.7, size = 1) +
geom_pointrange(data = polarising30Means,
aes(y = rank,
ymin = rank - se,
ymax = rank + se),
colour = "black",
alpha = 1,
size = .6) +
theme_bw() +   theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", size=.8)) +
labs(x = "songs") +
labs(y = "rank")  +
guides(colour = guide_legend(override.aes = list(size= 12))) +
theme(legend.title = element_blank()) +
ggtitle("")+
#theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle=90, hjust=0.95, vjust= 0.3)) +
scale_color_manual(values = c("#7C7771", "#00ABE6","#00ABE6", "#E69762",
"#BE9948","#ACA16E", "#EFDD9F","#EFDD9F",
"#ED1B33","#4E5065", "#577E43", "#B66950",
"#BDBDB9","#BDBDB9" )) + geom_point()+
scale_y_continuous(breaks=seq( 0,10,1))
ggplot(polarisingTop30, aes(x = songTitle, y = rank, color=album)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.7, size = 1) +
theme_bw() +   theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", size=.8)) +
labs(x = "songs") +
labs(y = "rank")  +
guides(colour = guide_legend(override.aes = list(size= 12))) +
theme(legend.title = element_blank()) +
ggtitle("")+
#theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle=90, hjust=0.95, vjust= 0.3)) +
scale_color_manual(values = c("black", "#BECE30", "#595959", "#ACA16E",
"#476272", "#8F6827","#1CBCBC", "#520996" )) + geom_point()+
geom_pointrange(data = polarising30Means,
aes(y = rank,
ymin = rank - se,
ymax = rank + se),
colour = "black",
alpha = 1,
size = .6) +
scale_y_continuous(breaks=seq( 0,10,1))
ggplot(polarisingTop30, aes(x = songTitle, y = rank, color=album)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.7, size = 1) +
theme_bw() +   theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", size=.8)) +
labs(x = "songs") +
labs(y = "rank")  +
guides(colour = guide_legend(override.aes = list(size= 12))) +
theme(legend.title = element_blank()) +
ggtitle("")+
#theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle=90, hjust=0.95, vjust= 0.3)) +
scale_color_manual(values = c("black", "#BECE30", "#595959", "#ACA16E",
"#476272", "#8F6827","#1CBCBC", "#520996" )) + geom_point()+
geom_pointrange(data = polarising30Means,
aes(y = rank,
ymin = rank - se,
ymax = rank + se),
colour = "red",
alpha = 1,
size = .6) +
scale_y_continuous(breaks=seq( 0,10,1))
ggplot(polarisingTop30, aes(x = songTitle, y = rank, color=album)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.7, size = 1) +
theme_bw() +   theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", size=.8)) +
labs(x = "songs") +
labs(y = "rank")  +
guides(colour = guide_legend(override.aes = list(size= 12))) +
theme(legend.title = element_blank()) +
ggtitle("")+
#theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle=90, hjust=0.95, vjust= 0.3)) +
scale_color_manual(values = c("black", "#BECE30", "#595959", "#ACA16E",
"#476272", "#8F6827","#1CBCBC", "#520996" )) + geom_point()+
geom_pointrange(data = polarising30Means,
aes(y = rank,
ymin = rank - se,
ymax = rank + se),
colour = "darkred",
alpha = 1,
size = .6) +
scale_y_continuous(breaks=seq( 0,10,1))
tiff(file="polarising30ranks.tiff", width = 9, height = 8, units = 'in', res = 300)
ggplot(polarisingTop30, aes(x = songTitle, y = rank, color=album)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.7, size = 1) +
theme_bw() +   theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", size=.8)) +
labs(x = "songs") +
labs(y = "rank")  +
guides(colour = guide_legend(override.aes = list(size= 12))) +
theme(legend.title = element_blank()) +
ggtitle("")+
#theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle=90, hjust=0.95, vjust= 0.3)) +
scale_color_manual(values = c("black", "#BECE30", "#595959", "#ACA16E",
"#476272", "#8F6827","#1CBCBC", "#520996" )) + geom_point()+
geom_pointrange(data = polarising30Means,
aes(y = rank,
ymin = rank - se,
ymax = rank + se),
colour = "darkred",
alpha = 1,
size = .6) +
scale_y_continuous(breaks=seq( 0,10,1))
dev.off()
ggplot(df4Top, aes(x = songTitle, y = rank, color=album)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.7, size = 1) +
theme_bw() +   theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", size=.8)) +
labs(x = "songs") +
labs(y = "rank")  +
guides(colour = guide_legend(override.aes = list(size= 12))) +
theme(legend.title = element_blank()) +
ggtitle("Top 30 ranked setlist songs Jan2023")+
#theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle=90, hjust=0.95, vjust= 0.3)) +
scale_color_manual(values = c("#7C7771", "#00ABE6","#00ABE6", "#E69762",
"#BE9948","#ACA16E", "#EFDD9F","#EFDD9F",
"#ED1B33","#4E5065", "#577E43", "#B66950",
"#BDBDB9","#BDBDB9" )) + geom_point()+
geom_pointrange(data = topMeans,
aes(y = rank,
ymin = rank - se,
ymax = rank + se),
colour = "black",
alpha = 1,
size = .6) +
scale_y_continuous(breaks=seq( 0,10,1))
tiff(file="top30ranks.tiff", width = 8, height = 9, units = 'in', res = 300)
ggplot(df4Top, aes(x = songTitle, y = rank, color=album)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.7, size = 1) +
theme_bw() +   theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", size=.8)) +
labs(x = "songs") +
labs(y = "rank")  +
guides(colour = guide_legend(override.aes = list(size= 12))) +
theme(legend.title = element_blank()) +
ggtitle("Top 30 ranked setlist songs Jan2023")+
#theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle=90, hjust=0.95, vjust= 0.3)) +
scale_color_manual(values = c("#7C7771", "#00ABE6","#00ABE6", "#E69762",
"#BE9948","#ACA16E", "#EFDD9F","#EFDD9F",
"#ED1B33","#4E5065", "#577E43", "#B66950",
"#BDBDB9","#BDBDB9" )) + geom_point()+
geom_pointrange(data = topMeans,
aes(y = rank,
ymin = rank - se,
ymax = rank + se),
colour = "black",
alpha = 1,
size = .6) +
scale_y_continuous(breaks=seq( 0,10,1))
dev.off()
tiff(file="polarising30ranks.tiff", width = 9, height = 8, units = 'in', res = 300)
ggplot(polarisingTop30, aes(x = songTitle, y = rank, color=album)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.7, size = 1) +
theme_bw() +   theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", size=.8)) +
labs(x = "songs") +
labs(y = "rank")  +
guides(colour = guide_legend(override.aes = list(size= 12))) +
theme(legend.title = element_blank()) +
ggtitle("")+
#theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle=90, hjust=0.95, vjust= 0.3)) +
scale_color_manual(values = c("black", "#BECE30", "#595959", "#ACA16E",
"#476272", "#8F6827","#1CBCBC", "#520996" )) + geom_point()+
geom_pointrange(data = polarising30Means,
aes(y = rank,
ymin = rank - se,
ymax = rank + se),
colour = "#ED1B33",
alpha = 1,
size = .6) +
scale_y_continuous(breaks=seq( 0,10,1))
dev.off()
View(df1)
View(df2)
setwd("F:/RWorkspace/GitHub/RFID-workshop/data/outputFiles")
df<-read.delim("Masterdf_noRepeats.txt", header=TRUE)
#how many individual tags (birds) in our dataset
length(unique(df$TagID_hex))
assignedFeeder<-sample(x = 1:3, size = 44, replace = TRUE)
TagID_hex<-unique(df$TagID_hex)
df2<-cbind(TagID_hex, assignedFeeder)
df2<-as.data.frame(df2)
df3 <- df2 %>%
mutate(assignedFeeder = recode(assignedFeeder,
"1" = "F01",
"2" = "F02",
"3" = "F03"))
df4 <- merge(df, df3, by = "TagID_hex", all = TRUE)
correctVisit <- c()
for (i in 1:nrow(df4)) {
correctVisit[i] <- identical(df4$feeder[i], df4$assignedFeeder[i])
}
df4$correctVisit <- correctVisit
#create a binary variable column for downstream statistical analyses and figures
df4$correctVisit<-as.character(df4$correctVisit)
df5 <- df4 %>%
mutate(correctVisitBinary = recode(correctVisit,
"TRUE" = "1",
"FALSE" = "0"))
View(df5)
View(df5)
df20 <- df5 %>%
group_by(TagID_hex) %>%
mutate(visit_count = n()) %>%
filter(visit_count >= 20) %>%
ungroup() %>%
select(-visit_count)
View(df5)
df20 <- df5 %>%
group_by(TagID_hex) %>%
mutate(correctVisit = n()) %>%  #what variable is visit count
filter(correctVisit >= 20) %>%
ungroup() %>%
select(-correctVisit)
View(df5)
success_check <- function(correctVisit ){
n <- length(correctVisit)  #what variable is correct
if (n < 20){
return(NA)
}
for (i in 1:(n-19)) {
window <- correctVisit[i: (i+ 19)]
if(window[1] == 1 && sum(window)/ 20 >= 0.8){
return(i+19)
}
}
return(NA)
}
success_check <- function(correct ){
n <- length(correct)  #what variable is correct
if (n < 20){
return(NA)
}
for (i in 1:(n-19)) {
window <- correct[i: (i+ 19)]
if(window[1] == 1 && sum(window)/ 20 >= 0.8){
return(i+19)
}
}
return(NA)
}
results20 <- df5 %>%
group_by(TagID_hex) %>%
summarise(criterion = success_check(correctVisit))
View(results20)
