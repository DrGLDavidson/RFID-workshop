head(PIT)
head(df)
#rename the header in PIT to match that of df
names(PIT)[names(PIT) == "pitID"] <- "TagID_hex"
names(PIT)
#if we view df, we will also see there are a lot of rows with no TagID_hex. This is because non-tagged birds often land on the feeder and it shows up as a time stamp with no corresponding TagID_hex. Lets remove blank rows, otherwise there will be many rows that can't merge with PIT.
df <- with(df, df[!(TagID_hex == "" | is.na(TagID_hex)), ])
#Now you can merge dataframes by their shared TagID_hex value. In addition, if there are any missing TagID_hex values from PIT, it will be indicated with "NA". In other words, if a bird that is not on our database was detected at the feeder, it will show up as NA. This code also returns any values from our PIT dataframe that was not on df. In otherwords, an NA is given if the bird on our database was never detected at the feeders.
df1 <- merge(df, PIT, by = "TagID_hex", all = TRUE)
df1[is.na(df1)] <- "NA"
#We are only interested in the TagID_hex that was detected at the feeder, but not on our database. We will filter these into a new dataframe called missing. We extract these as values that did not have a BTO
missing<-df1%>%
filter(btoID=="NA")
# why do we do this with the header btoRing? Because TagID_hex is now merged across dataframes, so this is no longer informative for missing data. Any of the headers from the PIT dataframe would work, but we are using btoID.
#there are 54 observations where there is no corresponding PIT tag.
#create a list of TagID_hex reads that did not have a match:
uniqueMisreads <- unique(missing$TagID_hex)
uniqueMisreads
#there are two tags. "0300024FEF" is our reference tag. It is the tag that the experimenter uses to test the feeders and mark when experiments start and end. "01103F3B1B" looks like a genuine tag. But is it a misread or missing data from our PIT tag data? To answer this, double check the master ringing database to see if that tag is there. If it is not there, assume it is a misread. If it is there, add it to the PIT database and re-run your code.
#save your misreads for your records
setwd(path)  # insert the correct working directory (path)
#upload a list of your known PIT tag IDs. Notice that the file is a .csv, rather than .txt
PIT<-read.csv(file="F:/RWorkspace/GitHub/RFID-workshop/data/PITList_tutorial.csv", header=TRUE)
names(PIT)
#note that the ring type (BTO and PIT) refer to whether it was a new bird (first time given the ring), or retrap (already had the ring). It is possible that a bird may already have a BTO ring (R) but not a PIT tag (N). However, in these cases, the code was meant to be A for added (but you can ignore this detail for now).
#check how many unique PIT tag IDs there are, it should match the number of observations (global environment). If it does not match, it suggests duplicates. Duplicates would matter if you are planning to merge the metadata and you want it to be a particular date (e.g. age of a bird when it was first fitted with a ring)
length(unique(PIT$pitID))
#to merge/match PIT tags from two files you must ensure the header that contains the values of interest are named the same across files. Currently they are not.
head(PIT)
head(df)
#rename the header in PIT to match that of df
names(PIT)[names(PIT) == "pitID"] <- "TagID_hex"
names(PIT)
#if we view df, we will also see there are a lot of rows with no TagID_hex. This is because non-tagged birds often land on the feeder and it shows up as a time stamp with no corresponding TagID_hex. Lets remove blank rows, otherwise there will be many rows that can't merge with PIT.
df <- with(df, df[!(TagID_hex == "" | is.na(TagID_hex)), ])
#Now you can merge dataframes by their shared TagID_hex value. In addition, if there are any missing TagID_hex values from PIT, it will be indicated with "NA". In other words, if a bird that is not on our database was detected at the feeder, it will show up as NA. This code also returns any values from our PIT dataframe that was not on df. In otherwords, an NA is given if the bird on our database was never detected at the feeders.
df1 <- merge(df, PIT, by = "TagID_hex", all = TRUE)
df1[is.na(df1)] <- "NA"
#We are only interested in the TagID_hex that was detected at the feeder, but not on our database. We will filter these into a new dataframe called missing. We extract these as values that did not have a BTO
missing<-df1%>%
filter(btoID=="NA")
# why do we do this with the header btoRing? Because TagID_hex is now merged across dataframes, so this is no longer informative for missing data. Any of the headers from the PIT dataframe would work, but we are using btoID.
#there are 54 observations where there is no corresponding PIT tag.
#create a list of TagID_hex reads that did not have a match:
uniqueMisreads <- unique(missing$TagID_hex)
uniqueMisreads
#there are two tags. "0300024FEF" is our reference tag. It is the tag that the experimenter uses to test the feeders and mark when experiments start and end. "01103F3B1B" looks like a genuine tag. But is it a misread or missing data from our PIT tag data? To answer this, double check the master ringing database to see if that tag is there. If it is not there, assume it is a misread. If it is there, add it to the PIT database and re-run your code.
#save your misreads for your records
write.csv(uniqueMisreads, pile.path(path, 'uniqueMisreadsFeeders.csv'))
#upload a list of your known PIT tag IDs. Notice that the file is a .csv, rather than .txt
PIT<-read.csv(file="F:/RWorkspace/GitHub/RFID-workshop/data/PITList_tutorial.csv", header=TRUE)
names(PIT)
#note that the ring type (BTO and PIT) refer to whether it was a new bird (first time given the ring), or retrap (already had the ring). It is possible that a bird may already have a BTO ring (R) but not a PIT tag (N). However, in these cases, the code was meant to be A for added (but you can ignore this detail for now).
#check how many unique PIT tag IDs there are, it should match the number of observations (global environment). If it does not match, it suggests duplicates. Duplicates would matter if you are planning to merge the metadata and you want it to be a particular date (e.g. age of a bird when it was first fitted with a ring)
length(unique(PIT$pitID))
#to merge/match PIT tags from two files you must ensure the header that contains the values of interest are named the same across files. Currently they are not.
head(PIT)
head(df)
#rename the header in PIT to match that of df
names(PIT)[names(PIT) == "pitID"] <- "TagID_hex"
names(PIT)
#if we view df, we will also see there are a lot of rows with no TagID_hex. This is because non-tagged birds often land on the feeder and it shows up as a time stamp with no corresponding TagID_hex. Lets remove blank rows, otherwise there will be many rows that can't merge with PIT.
df <- with(df, df[!(TagID_hex == "" | is.na(TagID_hex)), ])
#Now you can merge dataframes by their shared TagID_hex value. In addition, if there are any missing TagID_hex values from PIT, it will be indicated with "NA". In other words, if a bird that is not on our database was detected at the feeder, it will show up as NA. This code also returns any values from our PIT dataframe that was not on df. In otherwords, an NA is given if the bird on our database was never detected at the feeders.
df1 <- merge(df, PIT, by = "TagID_hex", all = TRUE)
df1[is.na(df1)] <- "NA"
#We are only interested in the TagID_hex that was detected at the feeder, but not on our database. We will filter these into a new dataframe called missing. We extract these as values that did not have a BTO
missing<-df1%>%
filter(btoID=="NA")
# why do we do this with the header btoRing? Because TagID_hex is now merged across dataframes, so this is no longer informative for missing data. Any of the headers from the PIT dataframe would work, but we are using btoID.
#there are 54 observations where there is no corresponding PIT tag.
#create a list of TagID_hex reads that did not have a match:
uniqueMisreads <- unique(missing$TagID_hex)
uniqueMisreads
#there are two tags. "0300024FEF" is our reference tag. It is the tag that the experimenter uses to test the feeders and mark when experiments start and end. "01103F3B1B" looks like a genuine tag. But is it a misread or missing data from our PIT tag data? To answer this, double check the master ringing database to see if that tag is there. If it is not there, assume it is a misread. If it is there, add it to the PIT database and re-run your code.
#save your misreads for your records
write.csv(uniqueMisreads, file.path(path, 'uniqueMisreadsFeeders.csv'))
#upload a list of your known PIT tag IDs. Notice that the file is a .csv, rather than .txt
PIT<-read.csv(file="F:/RWorkspace/GitHub/RFID-workshop/data/PITList_tutorial.csv", header=TRUE)
names(PIT)
#note that the ring type (BTO and PIT) refer to whether it was a new bird (first time given the ring), or retrap (already had the ring). It is possible that a bird may already have a BTO ring (R) but not a PIT tag (N). However, in these cases, the code was meant to be A for added (but you can ignore this detail for now).
#check how many unique PIT tag IDs there are, it should match the number of observations (global environment). If it does not match, it suggests duplicates. Duplicates would matter if you are planning to merge the metadata and you want it to be a particular date (e.g. age of a bird when it was first fitted with a ring)
length(unique(PIT$pitID))
#to merge/match PIT tags from two files you must ensure the header that contains the values of interest are named the same across files. Currently they are not.
head(PIT)
head(df)
#rename the header in PIT to match that of df
names(PIT)[names(PIT) == "pitID"] <- "TagID_hex"
names(PIT)
#if we view df, we will also see there are a lot of rows with no TagID_hex. This is because non-tagged birds often land on the feeder and it shows up as a time stamp with no corresponding TagID_hex. Lets remove blank rows, otherwise there will be many rows that can't merge with PIT.
df <- with(df, df[!(TagID_hex == "" | is.na(TagID_hex)), ])
#Now you can merge dataframes by their shared TagID_hex value. In addition, if there are any missing TagID_hex values from PIT, it will be indicated with "NA". In other words, if a bird that is not on our database was detected at the feeder, it will show up as NA. This code also returns any values from our PIT dataframe that was not on df. In otherwords, an NA is given if the bird on our database was never detected at the feeders.
df1 <- merge(df, PIT, by = "TagID_hex", all = TRUE)
df1[is.na(df1)] <- "NA"
#We are only interested in the TagID_hex that was detected at the feeder, but not on our database. We will filter these into a new dataframe called missing. We extract these as values that did not have a BTO
missing<-df1%>%
filter(btoID=="NA")
# why do we do this with the header btoRing? Because TagID_hex is now merged across dataframes, so this is no longer informative for missing data. Any of the headers from the PIT dataframe would work, but we are using btoID.
#there are 54 observations where there is no corresponding PIT tag.
#create a list of TagID_hex reads that did not have a match:
uniqueMisreads <- unique(missing$TagID_hex)
uniqueMisreads
#there are two tags. "0300024FEF" is our reference tag. It is the tag that the experimenter uses to test the feeders and mark when experiments start and end. "01103F3B1B" looks like a genuine tag. But is it a misread or missing data from our PIT tag data? To answer this, double check the master ringing database to see if that tag is there. If it is not there, assume it is a misread. If it is there, add it to the PIT database and re-run your code.
#save your misreads for your records
path_out = 'F:/RWorkspace/GitHub/RFID-workshop/data/outputFiles'
write.csv(uniqueMisreads, file.path(path, 'uniqueMisreadsFeeders.csv'))
#upload a list of your known PIT tag IDs. Notice that the file is a .csv, rather than .txt
PIT<-read.csv(file="F:/RWorkspace/GitHub/RFID-workshop/data/PITList_tutorial.csv", header=TRUE)
names(PIT)
#note that the ring type (BTO and PIT) refer to whether it was a new bird (first time given the ring), or retrap (already had the ring). It is possible that a bird may already have a BTO ring (R) but not a PIT tag (N). However, in these cases, the code was meant to be A for added (but you can ignore this detail for now).
#check how many unique PIT tag IDs there are, it should match the number of observations (global environment). If it does not match, it suggests duplicates. Duplicates would matter if you are planning to merge the metadata and you want it to be a particular date (e.g. age of a bird when it was first fitted with a ring)
length(unique(PIT$pitID))
#to merge/match PIT tags from two files you must ensure the header that contains the values of interest are named the same across files. Currently they are not.
head(PIT)
head(df)
#rename the header in PIT to match that of df
names(PIT)[names(PIT) == "pitID"] <- "TagID_hex"
names(PIT)
#if we view df, we will also see there are a lot of rows with no TagID_hex. This is because non-tagged birds often land on the feeder and it shows up as a time stamp with no corresponding TagID_hex. Lets remove blank rows, otherwise there will be many rows that can't merge with PIT.
df <- with(df, df[!(TagID_hex == "" | is.na(TagID_hex)), ])
#Now you can merge dataframes by their shared TagID_hex value. In addition, if there are any missing TagID_hex values from PIT, it will be indicated with "NA". In other words, if a bird that is not on our database was detected at the feeder, it will show up as NA. This code also returns any values from our PIT dataframe that was not on df. In otherwords, an NA is given if the bird on our database was never detected at the feeders.
df1 <- merge(df, PIT, by = "TagID_hex", all = TRUE)
df1[is.na(df1)] <- "NA"
#We are only interested in the TagID_hex that was detected at the feeder, but not on our database. We will filter these into a new dataframe called missing. We extract these as values that did not have a BTO
missing<-df1%>%
filter(btoID=="NA")
# why do we do this with the header btoRing? Because TagID_hex is now merged across dataframes, so this is no longer informative for missing data. Any of the headers from the PIT dataframe would work, but we are using btoID.
#there are 54 observations where there is no corresponding PIT tag.
#create a list of TagID_hex reads that did not have a match:
uniqueMisreads <- unique(missing$TagID_hex)
uniqueMisreads
#there are two tags. "0300024FEF" is our reference tag. It is the tag that the experimenter uses to test the feeders and mark when experiments start and end. "01103F3B1B" looks like a genuine tag. But is it a misread or missing data from our PIT tag data? To answer this, double check the master ringing database to see if that tag is there. If it is not there, assume it is a misread. If it is there, add it to the PIT database and re-run your code.
#save your misreads for your records
path_out = 'F:/RWorkspace/GitHub/RFID-workshop/data/outputFiles'
write.csv(uniqueMisreads, file.path(path_out, 'uniqueMisreadsFeeders.csv'))
#assuming we have resolved this, merge df and PIT again, using a different code that wont keep all NAs from the PIT file, but will remove NAs from the btoRing column, using the argument all = FALSE
df1 <- merge(df, PIT, by = "TagID_hex", all = FALSE)
#this returns a dataframe that is 1214 observations.
1268-1214
# this equals 54, which is the same number of observations from our dataframe "missing". This makes sense.
# Another way you can merge dataframes is using the package dplyr and the following code:
df2<-left_join(df, PIT ,by ="TagID_hex")
# and then we have to remove NAs with another chunk of code
df2<-df2[!is.na(df2$btoRing),]
write.table(df2, file = "Masterdf_noMisreads.txt",sep="\t",row.names=FALSE)
#clear the global environment so we don't have any conflicts with the next steps
rm(list = ls(all.names = TRUE))
#As we will be working with time, we need to check how our dataframe is named and organised
df2<-read.delim("Masterdf_noMisreads.txt", header=TRUE)
head(df2)
#there are two separate date columns and a time column. This is because we merged the feeder data with ringing data.
#rename ringing columns
names(df2)[names(df2) == "date"] <- "dateRinged"
names(df2)[names(df2) == "time"] <- "timeRinged"
#rename feeder date column to indicate it also includes hours, minutes and seconds
names(df2)[names(df2) == "Date"] <- "dateTime"
names(df2)
#create a new column with the date only
df2$date<-date(df2$dateTime)
#cleanup the dataframe by selected the columns and order we want them to appear
df2<-df2%>%
select(date, dateTime, Hmsec, ID, Event, Channel, Dur, Clks, Freq, Edges, Reps, Type, TagID_hex, feeder, dateRinged, timeRinged, btoRingType, btoID, species, pitTYPE, age, sex, wing, weight)
names(df2)
#we need to change the class of the timeDate column as a POSIX class.
df3<-df2%>%
mutate(dateTime=ymd_hms(dateTime))
class(df3$dateTime)
#create a column that calculates the time difference with previous row of a dataframe grouped by date, feeder and RFID
#consider why you are grouping by these columns. The time interval will only be calculated PER date PER feeder and PER tag. If you wanted to know the time interval between days as well, then you would not group by date. Or if you wanted an interval regardless or feeder, you would remove feeder from your grouping argument.
df4<-df3 %>%
arrange(dateTime)%>%
group_by(date, feeder, TagID_hex) %>%
mutate(timeSincePreviousVisit = dateTime - lag(dateTime))%>%
arrange(TagID_hex, feeder, dateTime)%>%
ungroup()%>%
select(feeder, TagID_hex,date, dateTime, timeSincePreviousVisit)
#look at the output of just those selected columns to see we have produced what we think we want
View(df4)
#0 sec was calculated if the bird was on the feeder within the same seconds
#NA is given if it is the birds' first visit to feeder X for that date
#rerun the above code without the select() argument so we have the full dataframe of variables
df4<-df3 %>%
arrange(dateTime)%>%
group_by(date, feeder, TagID_hex) %>%
mutate(timeSincePreviousVisit = dateTime - lag(dateTime))%>%
arrange(TagID_hex, feeder, dateTime)%>%
ungroup()
#the new column timeSincePreviousVisit has "secs" and we don't want that, so lets remove it
df4$timeSincePreviousVisit <- gsub(' secs', '', df4$timeSincePreviousVisit)
#the column timeSincePreviousVisit needs to be numeric for graphical purposes and for filtering based on greater than/less than values
df4$timeSincePreviousVisit <- as.numeric(as.character(df4$timeSincePreviousVisit))
class(df4$timeSincePreviousVisit)
#create a dataframe of successive visits that are less than 20 seconds so we can graph how frequently birds are read at the feeder
#use the "select" argument to extract only the column named timesSincePreviousVisit
df5<-df4%>%
filter(timeSincePreviousVisit <=20)%>%
select(timeSincePreviousVisit)
class(df5$timeSincePreviousVisit)
#cumulative frequency graph
ggplot(df5, aes(timeSincePreviousVisit, y= 1-..y..))+
stat_ecdf(geom = "step", color="purple")
#histogram
ggplot(df5, aes(x=timeSincePreviousVisit)) +geom_histogram(binwidth = 1)
#it appears that visit frequency drops after 2 seconds, but it is not a clear drop.
#Most of the literature does a cut off at 2 or 3 seconds.
#Filter dataset to remove visits that were within 2 seconds of eachother
#note that there are NAs because it was the first visit of the dataframe so we can replace that with 'firstVisit'
df4$timeSincePreviousVisit[is.na(df4$timeSincePreviousVisit)] <- 'firstVisit'
#to ensure we do not loose these visits - i think???? NO THIS JUST DUPLICATES DATA
#df6<-df4%>%
#filter(timeSincePreviousVisit=='firstVisit')
df6<-df4%>%
filter(timeSincePreviousVisit>2)
#we need to make the column timeSincePreviousVisit a character back from numerical in order to bind with df5, which is a character string
df6$timeSincePreviousVisit <- as.character(df6$timeSincePreviousVisit)
df7<-bind_rows(df6)%>%
arrange(dateTime, TagID_hex,feeder)
view(df7)
write.table(df7, file = "Masterdf_noRepeats.txt",sep="\t",row.names=FALSE)
rm(list = ls(all.names = TRUE))
df1<-read.delim("Masterdf_noRepeats.txt", header=TRUE)
#Check for periods of missing data
#we have a dataframe with time since previous visit grouped by individual and by date. We would expect big time gaps across all individuals if a feeder was down.
#make dateTime a PosiX class object
df1<-df1%>%
mutate(dateTime=ymd_hms(dateTime))
class(df1$dateTime)
#plot a histogram of visit frequency over hours. I think days of week is just assigned to start on friday.
hist(df1$dateTime, breaks = "hours", plot = TRUE, freq = TRUE, format)
#We see there are periods of inactivity but that is regular and likely corresponds to nightime hours.
#however, this plot does not indicate whether a given feeder was inactive, as it lumps all three feeders together.
#create new dataframes filtered by feeder.
F01<-df1%>%
filter(feeder=='F01')
#plot a histogram of visit frequency over hours for feeder F01
hist(F01$dateTime, breaks = "hours", plot = TRUE, freq = TRUE, format, ylim=c(1, 40) ) #ylim is set because I already visualised all the plots and chose to standardise the y axis so they are comparable. You will have to edit this for your own data.
F02<-df1%>%
filter(feeder=='F02')
#plot a histogram of visit frequency over hours for feeder F02
hist(F02$dateTime, breaks = "hours", plot = TRUE, freq = TRUE, format, ylim=c(1, 40))
F03<-df1%>%
filter(feeder=='F03')
#plot a histogram of visit frequency over hours for feeder F03
hist(F03$dateTime, breaks = "hours", plot = TRUE, freq = TRUE, format, ylim=c(1, 40))
#first check the dates data was collected
unique(df1$date)
#assuming feeder03 had a malfunction on the first day (2022-02-04), remove rows that meet the conditions of having the following dates in the column "date"
df2<-df1[!(df1$date=="2022-02-04") ,]
#the date should no longer be in the dataframe
unique(df2$date)
#if you needed to remove multiple date, the syntax is as follows:
df3<-df1[!(df1$date=="2022-02-04" |df1$date=="2022-02-05" |df1$date=="2022-02-06" ),]
unique(df3$date)
#create a new dataframe where it indicates that feeder 03 malfunctioned.
df4<-df1%>%
mutate(feeder03Malf = case_when(date =='2022-02-04' ~'Y',
date =='2022-02-05'~'Y' ,
date =='2022-02-06'~'Y'))
#load the following packages
library(tidyverse)
library(rmarkdown)
library(dplyr)
library(tidyr)
library(lubridate)
library(ggplot2)
library(stringi) #may not need this
library(magrittr) #may not need this
#clear the global environment so we don't have any conflicts with the next steps
rm(list = ls(all.names = TRUE))
#choose the appropriate working directory
setwd("F:/RWorkspace/GitHub/RFID-workshop/data/outputFiles")
#call your most recent dataset
df<-read.delim("Masterdf_noRepeats.txt", header=TRUE)
head(df)
names(df)
#a new dataframe that counts the total number of visits per feeder per individual, per date.
individualVisits<-df%>%
count(feeder, TagID_hex, date, sort = TRUE)
#rename n column "visits"
names(individualVisits)[names(individualVisits) == "n"] <- "visits"  #rename columns
names(individualVisits)
#visualise the data on a figure using ggplot
individualVisits%>%
ggplot(aes(x = TagID_hex, y = visits, color = feeder))+  #specify axis labels and groupings
labs(x = "Bird ID", y = "Total visits") + #specify axis labels
geom_point(aes(shape=feeder), size=2) + # specify shape and size of points for the variable feeder
theme_bw() +   theme(axis.text.x = element_text(angle=90)) #removes the default gray background and rotates x labels.
#Note that each data point is a unique date. Therefore this plot gives you information not only on the number of visits they make on a given day, but also over how many days.
#Because of the outliers, it's difficult to resolve what is happening between 0 and 20 visits.
#Restrict axis limits and minimise datapoint overlap
individualVisits%>%
ggplot(aes(x = TagID_hex, y = visits, color = feeder))+  #specify axis labels and groupings
labs(x = "Bird ID", y = "Total visits") + #specify axis labels
geom_point(aes(shape=feeder), size=2) + # specify shape and size of points for the variable feeder
theme_bw() +   theme(axis.text.x = element_text(angle=90))+
geom_point() + #removes the default gray background and rotates x labels.
ylim(0, 25) + #specify axis limits
geom_point(position = position_jitter(width = 0.3)) #jitter the points along a horizontal axis to minimise overlap
#can also remove shape for visualization
individualVisits%>%
ggplot(aes(x = TagID_hex, y = visits, color = feeder))+  #specify axis labels and groupings
labs(x = "Bird ID", y = "Total visits") + #specify axis labels
geom_point(size=1) + # specify size ONLY of points for the variable feeder
theme_bw() +   theme(axis.text.x = element_text(angle=90))+
geom_point() + #removes the default gray background and rotates x labels.
ylim(0, 25) + #specify axis limits
geom_point(position = position_jitter(width = 0.3))
#a new dataframe that counts the proportion an individual visits a feeder relative to the other feeders, per day.
ProportionVisits<-individualVisits%>%
group_by(TagID_hex, date)%>%
arrange(TagID_hex)%>%
mutate(freq = visits / sum(visits))%>%
ungroup()
#a new dataframe that counts the proportion an individual visits a feeder relative to the other feeders, per day.
ProportionVisits<-individualVisits%>%
group_by(TagID_hex, date)%>%
arrange(TagID_hex)%>%
mutate(proportion = visits / sum(visits))%>%
ungroup()
#plot proportions. Better to use the original dataframe as the following code counts each line as a visit
ggplot(df,aes(x=factor(TagID_hex),fill=factor(feeder)))+
geom_bar(position="fill")+
geom_text(aes(label=..count..),stat='count',position=position_fill(vjust=0.5), angle=90, size=3) +
#scale_x_discrete (labels = c("F01","F02","F03")) +
theme_bw() +   theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
panel.border = element_rect(linetype = "solid", colour = "black", size=.8)) +
#scale_fill_manual("Feeder", values = c("1" = "gray49", "0" = "gray84"))+
theme(text=element_text(size=12,  family="serif"),
axis.ticks = element_line(colour = "black", size = .6)) +
labs(x = "Bird ID") +
labs(y = "Proportion of visits") +
theme_bw() +   theme(axis.text.x = element_text(angle=90))
#load the following packages
library(tidyverse) #some of the packages below are included in tidyverse
library(rmarkdown)
library(dplyr)
library(tidyr)
library(lubridate)
library(ggplot2)
library(stringi)
library(magrittr) #may not need this
# These are new and need to be installed
library(writexl)
library(readxl)
library(zoo) #rolling function
#clear the global environment so we don't have any conflicts with the next steps
rm(list = ls(all.names = TRUE))
#choose the appropriate working directory
setwd("F:/RWorkspace/GitHub/RFID-workshop/data/outputFiles")
#call your most recent dataset
df<-read.delim("Masterdf_noRepeats.txt", header=TRUE)
head(df)
names(df)
#how many individual tags (birds) in our dataset
length(unique(df$TagID_hex))
#in practice, you will have (or create) a file for each bird indicating which feeder opens for which bird. This is often referred to as "ListA" because this is what the logic is called in the logger.ini file associated with the computerised feeder.
#For the purpose of this tutorial, we create a random vector of data to indicate which feeder opens for a given bird. Draw 44 samples from the integers 1:3 with replacement (i.e. each number can be redrawn), and attach that to unique bird IDs.
assignedFeeder<-sample(x = 1:3, size = 44, replace = TRUE)
#unique birds in df
TagID_hex<-unique(df$TagID_hex)
df2<-cbind(TagID_hex, assignedFeeder)
df2<-as.data.frame(df2)
#change values in assignedFeeder to match feeder values in df.
df3 <- df2 %>%
mutate(assignedFeeder = recode(assignedFeeder,
"1" = "F01",
"2" = "F02",
"3" = "F03"))
df4 <- merge(df, df3, by = "TagID_hex", all = TRUE)
#create a vector of whether values in df4$feeder are identical to df4$assignedFeeder and return TRUE or FALSE
correctVisit <- c()
for (i in 1:nrow(df4)) {
correctVisit[i] <- identical(df4$feeder[i], df4$assignedFeeder[i])
}
#add the vector to df4
df4$correctVisit <- correctVisit
#create a binary variable column for downstream statistical analyses and figures
df4$correctVisit<-as.character(df4$correctVisit)
df5 <- df4 %>%
mutate(correctVisitBinary = recode(correctVisit,
"TRUE" = "1",
"FALSE" = "0"))
write.table(df5, file = "Masterdf_correctVisits.txt",sep="\t",row.names=FALSE)
#filter out birds that have visited at least 20 times
class(df5$correctVisitBinary)
df5$correctVisitBinary<-as.numeric(df5$correctVisitBinary)
df6 <- df5 %>%
group_by(TagID_hex) %>%
mutate(visit_count = n()) %>%  #what variable is visit count
filter(visit_count >= 20) %>%
ungroup() %>%
select(-visit_count)
#function for when criterion met first. Here the value 20 represents filtering for 20 visits, so the above code isn't necessary if using this code as well. There is no harm in running both.
#Here, "correct" is a vector that contains binary values (1 for correct visits, 0 for false visits). Each element should correspond to a visit. The success_check function determines the first instance when a bird meets a specific learning criterion based on visits. For the function:
#At least 20 consecutive visits are required. (This is not actually needed as we filtered data beforehand, but the filtering by 20 visits on its own is a useful piece of code if you want to apply it separately to learning function.
#The first visit within these 20 consecutive visits must be a correct visit (indicated by window[1] == 1) and 80% or more of these #20 visits must be correct (sum(window)/ 20 >= 0.8) for the criterion to be met.
#19 refers to a count
success_check <- function(correct ){
n <- length(correct)  #what variable is correct
if (n < 20){
return(NA)
}
for (i in 1:(n-19)) {
window <- correct[i: (i+ 19)]
if(window[1] == 1 && sum(window)/ 20 >= 0.8){
return(i+19)
}
}
return(NA)
}
#### birds visiting >20 ####
#apply criterion check function
results20 <- df5 %>%
group_by(TagID_hex) %>%
summarise(criterion = success_check(correctVisitBinary)) #here "correctVisitBinary" is the column with 0 or 1 values and should be numerical
view(results20)
#You will see there are many NAs. This is because most birds have yet to learn under our criteria.
#To demonstrate, you could alter the values in the function so it is less stringent (and simply because our dataset is small, birds have yet to learn). The participation will be 5 visits, and 80% correct in 5 visits
success_check2 <- function(correct ){
n <- length(correct)  #what variable is correct
if (n < 5){
return(NA)
}
for (i in 1:(n-4)) {
window <- correct[i: (i+ 4)]
if(window[1] == 1 && sum(window)/ 5 >= 0.8){
return(i+4)
}
}
return(NA)
}
#apply criterion check function
results5 <- df5 %>%
group_by(TagID_hex) %>%
summarise(criterion = success_check2(correctVisitBinary))
view(results5)
#there are still a lot of NAs, but you can see there are more birds that learned, and the number of visits it took to learn.
#if you wish to save this data, you could do that now.
path_out = 'F:/RWorkspace/GitHub/RFID-workshop/data/outputFiles'
write.csv(results5, file.path(path_out,'birdsReachingCriterion_5visits.csv'))
#clear the global environment so we don't have any conflicts with the next steps
rm(list = ls(all.names = TRUE))
#choose the appropriate working directory
setwd("F:/RWorkspace/GitHub/RFID-workshop/data/outputFiles")
#call your most recent dataset
df<-read.delim("Masterdf_noRepeats.txt", header=TRUE)
head(df)
names(df)
#how many individual tags (birds) in our dataset
length(unique(df$TagID_hex))
#in practice, you will have (or create) a file for each bird indicating which feeder opens for which bird. This is often referred to as "ListA" because this is what the logic is called in the logger.ini file associated with the computerised feeder.
#For the purpose of this tutorial, we create a random vector of data to indicate which feeder opens for a given bird. Draw 44 samples from the integers 1:3 with replacement (i.e. each number can be redrawn), and attach that to unique bird IDs.
assignedFeeder<-sample(x = 1:3, size = 44, replace = TRUE)
#unique birds in df
TagID_hex<-unique(df$TagID_hex)
df2<-cbind(TagID_hex, assignedFeeder)
df2<-as.data.frame(df2)
#change values in assignedFeeder to match feeder values in df.
df3 <- df2 %>%
mutate(assignedFeeder = recode(assignedFeeder,
"1" = "F01",
"2" = "F02",
"3" = "F03"))
df4 <- merge(df, df3, by = "TagID_hex", all = TRUE)
#create a vector of whether values in df4$feeder are identical to df4$assignedFeeder and return TRUE or FALSE
correctVisit <- c()
for (i in 1:nrow(df4)) {
correctVisit[i] <- identical(df4$feeder[i], df4$assignedFeeder[i])
}
#add the vector to df4
df4$correctVisit <- correctVisit
#create a binary variable column for downstream statistical analyses and figures
df4$correctVisit<-as.character(df4$correctVisit)
df5 <- df4 %>%
mutate(correctVisitBinary = recode(correctVisit,
"TRUE" = "1",
"FALSE" = "0"))
write.table(df5, file = "Masterdf_correctVisits.txt",sep="\t",row.names=FALSE)
#filter out birds that have visited at least 20 times
class(df5$correctVisitBinary)
df5$correctVisitBinary<-as.numeric(df5$correctVisitBinary)
df6 <- df5 %>%
group_by(TagID_hex) %>%
mutate(visit_count = n()) %>%  #what variable is visit count
filter(visit_count >= 20) %>%
ungroup() %>%
select(-visit_count)
#function for when criterion met first. Here the value 20 represents filtering for 20 visits, so the above code isn't necessary if using this code as well. There is no harm in running both.
#Here, "correct" is a vector that contains binary values (1 for correct visits, 0 for false visits). Each element should correspond to a visit. The success_check function determines the first instance when a bird meets a specific learning criterion based on visits. For the function:
#At least 20 consecutive visits are required. (This is not actually needed as we filtered data beforehand, but the filtering by 20 visits on its own is a useful piece of code if you want to apply it separately to learning function.
#The first visit within these 20 consecutive visits must be a correct visit (indicated by window[1] == 1) and 80% or more of these #20 visits must be correct (sum(window)/ 20 >= 0.8) for the criterion to be met.
#19 refers to a count
success_check <- function(correct ){
n <- length(correct)  #what variable is correct
if (n < 20){
return(NA)
}
for (i in 1:(n-19)) {
window <- correct[i: (i+ 19)]
if(window[1] == 1 && sum(window)/ 20 >= 0.8){
return(i+19)
}
}
return(NA)
}
#### birds visiting >20 ####
#apply criterion check function
results20 <- df5 %>%
group_by(TagID_hex) %>%
summarise(criterion = success_check(correctVisitBinary)) #here "correctVisitBinary" is the column with 0 or 1 values and should be numerical
head(results5)
